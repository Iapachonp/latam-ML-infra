
name: 'Latam ML micro-service'

# **What it does**: Renders the content of every page and check all internal links.
# **Why we have it**: To make sure all links connect correctly.
# **Who does it impact**: Docs content.


on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:

  build-test-and-validations-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - name: checks version
        run: |
          echo "test_image_version=$(echo `cat main/tests/test-image/version.txt`)" >> $GITHUB_ENV
          echo "version to deploy $test_image_version"
          cp main/requirements.txt main/tests/test-image/
      - name: docker-setup
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./main/tests/test-image
          push: true
          tags: | 
            iapachonp/latam-ml-test-and-validations:production  
            iapachonp/latam-ml-test-and-validations:${{ env.test_image_version }}
  
  test-and-validate:
    runs-on: ubuntu-latest
    container: iapachonp/latam-ml-test-and-validations:production
    needs: [build-test-and-validations-image]
    - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main 
    - name: test
        run: |
          ./scripts/test.sh 

  infra:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/sa.json  
      sacred: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }} 
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - run: echo $sacred >> /tmp/sa.json
      - name: Terraform fmt
        id: fmt
        run: cd ./terraform && terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: cd ./terraform && terraform init 

      - name: Terraform Validate
        id: validate
        run: cd ./terraform && terraform validate -no-color 

      - name: Terraform Plan
        id: plan
        run: cd ./terraform && terraform plan -no-color 
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: cd ./terraform && terraform apply -auto-approve -input=false


  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - name: checks version
        run: |
         echo "ML_version=$(echo `cat main/version.txt`)" >> $GITHUB_ENV
      - name: test version
        run: echo $ML_version
  
  get-ML-model:
    needs: [get-version, infra]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - name: checks version
        run: |
         echo "ML_version=$(echo `cat main/version.txt`)" >> $GITHUB_ENV
      - name: get model file
        run: echo $ML_version
      - id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
      - name: Use gcloud CLI
        run: gsutil cp "gs://ml-latam-3f89841d-5689-4ffc-abed-807239371ca62/Latam_flight_model.${ML_version}.pkl" /tmp/
      - name: Archive model 
        uses: actions/upload-artifact@v3
        with:
          name: latam-ml-model
          path: /tmp/Latam_flight_model.${{ env.ML_version }}.pkl

  build-image:
    needs: [get-ML-model, infra] 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: main
      - uses: actions/download-artifact@v3
        with:
          name: latam-ml-model
          path: main/
      - name: version to deploy
        run: echo $ML_version
      - name: checks version
        run: |
          echo "ML_version=$(echo `cat main/version.txt`)" >> $GITHUB_ENV
          echo "version to deploy $ML_version"
      - name: docker-setup
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./main/
          push: true
          target: prod-final 
          tags: | 
            iapachonp/latam-ml-api:production  
            iapachonp/latam-ml-api:${{ env.ML_version }}
          build-args: |
            arg_model_version=${{ env.ML_version }}








